# @package _global_

defaults:
  - rl_base
  - /habitat_baselines: habitat_baselines_rl_config_base
  - /habitat/simulator/sim_sensors@habitat_baselines.eval.extra_sim_sensors.third_rgb_sensor: third_rgb_sensor
  - /env_tasks: env_tasks_config_base
  - /aux_distill/env_tasks/skills/lang_pick_prox@env_tasks.skills.lang_pick_prox: config
  - /aux_distill/env_tasks/skills/pick@env_tasks.skills.pick: config
  - /aux_distill/env_tasks/skills/nav_pick@env_tasks.skills.nav_pick: config
  - /aux_distill/env_tasks/skills/nav_place@env_tasks.skills.nav_place: config
  - /aux_distill/env_tasks/skills/nav_pick_nav_place@env_tasks.skills.nav_pick_nav_place: config
  - /aux_distill/env_tasks/skills/nav_open_fridge@env_tasks.skills.nav_open_fridge: config
  - /aux_distill/env_tasks/skills/nav_open_cabinet@env_tasks.skills.nav_open_cabinet: config
  - /aux_distill/env_tasks/skills/open_fridge_pick@env_tasks.skills.open_fridge_pick: config
  - _self_
env_tasks:
  random_seed_by_rank: True
  eval_allowed_skills: ["nav_pick","nav_place","nav_pick_nav_place","nav_open_fridge","nav_open_cabinet","open_fridge_pick"]
  eval_group_by: "is_art_measure"
  eval_group_measures: ["composite_pddl_success", "pick_obj_measure"]
 


habitat: 
  env_task_gym_id: "HabitatPick-v0"
  task: 
    rank0_measure_names: 
      - "env_task_measure"
      - "is_art_sensor"
      - "is_art_measure"
    type: "RearrangePickTask-v0"
habitat_baselines:
  updater_name: AuxPredPPOUpdater 
  distrib_updater_name: AuxPredDDPPOUpdater
  rollout_storage_name: "RolloutStorage"
  verbose: False
  trainer_name: "aux_trainer"
  torch_gpu_id: 0
  tensorboard_dir: "tb"
  video_dir: "video_dir"
  video_fps: 30
  test_episode_count: -1
  eval_ckpt_path_dir: "data/new_checkpoints"
  # 26 environments will just barely be below 16gb.
  # num_environments: 26
  # 18 environments will just barely be below 11gb.
  # num_environments: 18
  num_updates: -1
  # total_num_steps: 1.0e8
  log_interval: 10
  # Force PyTorch to be single threaded as
  # this improves performance considerably
  force_torch_single_threaded: True
  eval_keys_to_include_in_name: ["composite_pddl_success"]
  vector_env_factory:
    _target_: skill_chain.trainer.custom_gym_env.CustomVectorEnvFactory
  eval:
    video_option: ["disk"]
  rl:
    policy:
      main_agent:
        name: "AuxMultiTaskPolicy"
        action_distribution_type: "gaussian"
        action_dist: 
          use_log_std: True
          clamp_std: True
          std_init: -1.0
          use_std_param: True
    ppo:
      # ppo params
      clip_param: 0.2
      ppo_epoch: 2
      num_mini_batch: 2
      value_loss_coef: 0.5
      entropy_coef: 0.001
      lr: 3e-4
      eps: 1e-5
      max_grad_norm: 0.2
      num_steps: 128
      use_gae: True
      gamma: 0.99
      tau: 0.95
      use_linear_clip_decay: False
      use_linear_lr_decay: True
      reward_window_size: 50

      use_normalized_advantage: False

      hidden_size: 512

      # Use double buffered sampling, typically helps
      # when environment time is similar or larger than
      # policy inference time during rollout generation
      use_double_buffered_sampler: False

    ddppo:

      sync_frac: 0.6
      # The PyTorch distributed backend to use
      distrib_backend: NCCL
      # Initialize with pretrained weights
      pretrained: False
      # Initialize just the visual encoder backbone with pretrained weights
      pretrained_encoder: False
      # Whether the visual encoder backbone will be trained.
      train_encoder: True
      # Whether to reset the critic linear layer
      reset_critic: True

      # Model parameters
      backbone: resnet50
      rnn_type: LSTM
      num_recurrent_layers: 2
